//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for FileStatus.
const (
	PROCESSEDSUCCESSFULLY FileStatus = "PROCESSED_SUCCESSFULLY"
	PROCESSING            FileStatus = "PROCESSING"
	PROCESSINGFAILED      FileStatus = "PROCESSING_FAILED"
	UPLOADED              FileStatus = "UPLOADED"
)

// Defines values for QuestionType.
const (
	QuestionTypeBOOLEAN QuestionType = "BOOLEAN"
	QuestionTypeMETRIC  QuestionType = "METRIC"
	QuestionTypeTEXT    QuestionType = "TEXT"
)

// Defines values for QuestionParamsType.
const (
	QuestionParamsTypeBOOLEAN QuestionParamsType = "BOOLEAN"
	QuestionParamsTypeMETRIC  QuestionParamsType = "METRIC"
	QuestionParamsTypeTEXT    QuestionParamsType = "TEXT"
)

// Defines values for ScreeningStatus.
const (
	FAILED     ScreeningStatus = "FAILED"
	GENERATING ScreeningStatus = "GENERATING"
	REQUESTED  ScreeningStatus = "REQUESTED"
	SUCCESSFUL ScreeningStatus = "SUCCESSFUL"
)

// Answer defines model for Answer.
type Answer struct {
	Boolean    *bool              `json:"boolean,omitempty"`
	Evidence   []Evidence         `json:"evidence"`
	Metric     *MetricValue       `json:"metric,omitempty"`
	QuestionId openapi_types.UUID `json:"question_id"`
	Text       string             `json:"text"`
}

// Document defines model for Document.
type Document struct {
	Content  string   `json:"content"`
	Distance *float64 `json:"distance,omitempty"`
	Page     int32    `json:"page"`
}

// Documents defines model for Documents.
type Documents struct {
	Documents []Document `json:"documents"`
}

// Evidence defines model for Evidence.
type Evidence struct {
	FileId openapi_types.UUID `json:"file_id"`
	Page   int32              `json:"page"`
	Text   string             `json:"text"`
}

// File defines model for File.
type File struct {
	ContentType   string             `json:"content_type"`
	CreatedAt     time.Time          `json:"created_at"`
	Extension     string             `json:"extension"`
	FileName      string             `json:"file_name"`
	Hash          string             `json:"hash"`
	Id            openapi_types.UUID `json:"id"`
	Size          int64              `json:"size"`
	Status        FileStatus         `json:"status"`
	StatusMessage string             `json:"status_message"`
	UpdatedAt     time.Time          `json:"updated_at"`
}

// FileStatus defines model for File.Status.
type FileStatus string

// Files defines model for Files.
type Files struct {
	Files []File `json:"files"`
}

// MetricValue defines model for MetricValue.
type MetricValue struct {
	Unit  *string `json:"unit,omitempty"`
	Value float64 `json:"value"`
}

// Question defines model for Question.
type Question struct {
	Content string             `json:"content"`
	Id      openapi_types.UUID `json:"id"`
	Type    QuestionType       `json:"type"`
}

// QuestionType defines model for Question.Type.
type QuestionType string

// QuestionParams defines model for QuestionParams.
type QuestionParams struct {
	Content string             `json:"content"`
	Type    QuestionParamsType `json:"type"`
}

// QuestionParamsType defines model for QuestionParams.Type.
type QuestionParamsType string

// Screening defines model for Screening.
type Screening struct {
	Answers       []Answer           `json:"answers"`
	CreatedAt     time.Time          `json:"created_at"`
	Files         []File             `json:"files"`
	Id            openapi_types.UUID `json:"id"`
	Questions     []Question         `json:"questions"`
	Status        ScreeningStatus    `json:"status"`
	StatusMessage *string            `json:"status_message,omitempty"`
	UpdatedAt     time.Time          `json:"updated_at"`
}

// ScreeningStatus defines model for Screening.Status.
type ScreeningStatus string

// ScreeningParams defines model for ScreeningParams.
type ScreeningParams struct {
	FileIds   []openapi_types.UUID `json:"file_ids"`
	Id        *openapi_types.UUID  `json:"id,omitempty"`
	Questions []QuestionParams     `json:"questions"`
}

// Screenings defines model for Screenings.
type Screenings struct {
	Screenings []Screening `json:"screenings"`
}

// UploadFileMultipartBody defines parameters for UploadFile.
type UploadFileMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// ListFileDocumentsParams defines parameters for ListFileDocuments.
type ListFileDocumentsParams struct {
	// SimilarTo Return documents similar to this text (using vector search)
	SimilarTo *string `form:"similar_to,omitempty" json:"similar_to,omitempty"`

	// Limit Max number of documents to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// UploadFileMultipartRequestBody defines body for UploadFile for multipart/form-data ContentType.
type UploadFileMultipartRequestBody UploadFileMultipartBody

// CreateScreeningJSONRequestBody defines body for CreateScreening for application/json ContentType.
type CreateScreeningJSONRequestBody = ScreeningParams

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List uploaded files
	// (GET /files)
	ListFiles(w http.ResponseWriter, r *http.Request)
	// Upload a file and add documents extracted from it to the knowledge base
	// (POST /files)
	UploadFile(w http.ResponseWriter, r *http.Request)
	// Delete a file by ID
	// (DELETE /files/{id})
	DeleteFileById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get a single file by ID
	// (GET /files/{id})
	GetFileById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// List file documents
	// (GET /files/{id}/documents)
	ListFileDocuments(w http.ResponseWriter, r *http.Request, id openapi_types.UUID, params ListFileDocumentsParams)
	// List screenings
	// (GET /screenings)
	ListScreenings(w http.ResponseWriter, r *http.Request)
	// Create a screening.
	// (POST /screenings)
	CreateScreening(w http.ResponseWriter, r *http.Request)
	// Delete a screening by ID
	// (DELETE /screenings/{id})
	DeleteScreeningById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get a single screening by ID
	// (GET /screenings/{id})
	GetScreeningById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListFiles operation middleware
func (siw *ServerInterfaceWrapper) ListFiles(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFiles(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UploadFile operation middleware
func (siw *ServerInterfaceWrapper) UploadFile(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadFile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteFileById operation middleware
func (siw *ServerInterfaceWrapper) DeleteFileById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFileById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFileById operation middleware
func (siw *ServerInterfaceWrapper) GetFileById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFileById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFileDocuments operation middleware
func (siw *ServerInterfaceWrapper) ListFileDocuments(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFileDocumentsParams

	// ------------- Optional query parameter "similar_to" -------------

	err = runtime.BindQueryParameter("form", true, false, "similar_to", r.URL.Query(), &params.SimilarTo)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "similar_to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFileDocuments(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListScreenings operation middleware
func (siw *ServerInterfaceWrapper) ListScreenings(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListScreenings(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateScreening operation middleware
func (siw *ServerInterfaceWrapper) CreateScreening(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateScreening(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteScreeningById operation middleware
func (siw *ServerInterfaceWrapper) DeleteScreeningById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteScreeningById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetScreeningById operation middleware
func (siw *ServerInterfaceWrapper) GetScreeningById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScreeningById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/files", wrapper.ListFiles)
	m.HandleFunc("POST "+options.BaseURL+"/files", wrapper.UploadFile)
	m.HandleFunc("DELETE "+options.BaseURL+"/files/{id}", wrapper.DeleteFileById)
	m.HandleFunc("GET "+options.BaseURL+"/files/{id}", wrapper.GetFileById)
	m.HandleFunc("GET "+options.BaseURL+"/files/{id}/documents", wrapper.ListFileDocuments)
	m.HandleFunc("GET "+options.BaseURL+"/screenings", wrapper.ListScreenings)
	m.HandleFunc("POST "+options.BaseURL+"/screenings", wrapper.CreateScreening)
	m.HandleFunc("DELETE "+options.BaseURL+"/screenings/{id}", wrapper.DeleteScreeningById)
	m.HandleFunc("GET "+options.BaseURL+"/screenings/{id}", wrapper.GetScreeningById)

	return m
}
