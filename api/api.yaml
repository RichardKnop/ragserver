openapi: "3.0.0"
info:
  version: 1.0.0
  title: RAG Server API
paths:
  /files:
    post:
      summary: Upload a file and add documents extracted from it to the knowledge base
      operationId: uploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "201":
          description: A single file object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
    get:
      summary: List uploaded files
      operationId: listFiles
      responses:
        "200":
          description: Array of file objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Files"
  /files/{id}:
    get:
      summary: Get a single file by ID
      operationId: getFileById
      parameters:
        - name: id
          in: path
          description: File ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A single file object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
    delete:
      summary: Delete a file by ID
      operationId: deleteFileById
      parameters:
        - name: id
          in: path
          description: File ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: File deleted successfully
  /files/{id}/documents:
    get:
      summary: List file documents
      operationId: listFileDocuments
      parameters:
        - name: id
          in: path
          description: File ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Array of document extracted from a file
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Documents"
  /screenings:
    post:
      summary: Create a screening.
      operationId: createScreening
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScreeningParams"
      responses:
        "201":
          description: Screening object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Screening"
    get:
      summary: List screenings
      operationId: listScreenings
      responses:
        "200":
          description: Array of screening objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Screenings"
  /screenings/{id}:
    get:
      summary: Get a single screening by ID
      operationId: getScreeningById
      parameters:
        - name: id
          in: path
          description: Screening ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A single screening object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Screening"
    delete:
      summary: Delete a screening by ID
      operationId: deleteScreeningById
      parameters:
        - name: id
          in: path
          description: Screening ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Screening deleted successfully

components:
  schemas:
    File:
      type: object
      required:
        - id
        - file_name
        - content_type
        - extension
        - size
        - hash
        - status
        - status_message
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
        file_name:
          type: string
        content_type:
          type: string
        extension:
          type: string
        size:
          type: integer
          format: int64
        hash:
          type: string
        status:
          type: string
          enum: [UPLOADED, PROCESSING, PROCESSED_SUCCESSFULLY, PROCESSING_FAILED]
        status_message:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Files: 
      type: object
      required:
        - files
      properties:
        files:
          type: array
          items:
            $ref: "#/components/schemas/File"
    Documents: 
      type: object
      required:
        - documents
      properties:
        documents:
          type: array
          items:
            $ref: "#/components/schemas/Document"
    Document:
      type: object
      required:
        - content
        - page
      properties:
        content:
          type: string
        page:
          type: integer
          format: int32
    QuestionParams:
      type: object
      required:
        - type
        - content
      properties:
        type:
          type: string
          enum: [TEXT, METRIC, BOOLEAN]
        content:
          type: string
    Question:
      type: object
      required:
        - id
        - type
        - content
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [TEXT, METRIC, BOOLEAN]
        content:
          type: string
    Answer:
      type: object
      required:
        - question_id
        - text
        - evidence
      properties:
        question_id:
          type: string
          format: uuid
        text:
          type: string
        metric:
          type: object
          $ref: "#/components/schemas/MetricValue"
        boolean: 
          type: boolean
        evidence:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/Evidence"
    Evidence:
      type: object
      required:
        - file_id
        - page
        - text
      properties:
        file_id:
          type: string
          format: uuid
        page:
          type: integer
          format: int32
        text:
          type: string
    MetricValue:
      type: object
      required:
        - value
      properties:
        value:
          type: number
          format: double
        unit:
          type: string
    ScreeningParams:
      type: object
      required:
        - file_ids
        - questions
      properties:
        id:
          type: string
          format: uuid
        file_ids:
          type: array
          items:
            type: string
            format: uuid
        questions: 
          type: array
          items:
            $ref: "#/components/schemas/QuestionParams"
    Screening:
      type: object
      required:
        - id
        - files
        - questions
        - answers
        - status
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
        files: 
          type: array
          items:
            $ref: "#/components/schemas/File"
        questions: 
          type: array
          items:
            $ref: "#/components/schemas/Question"
        answers: 
          type: array
          items:
            $ref: "#/components/schemas/Answer"
        status:
          type: string
          enum: [REQUESTED, GENERATING, SUCCESSFUL, FAILED]
        status_message:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Screenings: 
      type: object
      required:
        - screenings
      properties:
        screenings:
          type: array
          items:
            $ref: "#/components/schemas/Screening"
